import { Object3D, Quaternion, Vector3 } from 'three';
import { PointerTracker } from './core/Pointers';
import { AnyCameraType } from './core/ControlsBase';
import { ControlsInteractive } from './core/ControlsInteractive';
import { TransformHelper } from './TransformHelper';

declare class TransformControls extends ControlsInteractive {

	static readonly isTransformControls = true;
	static readonly type = "TransformControls";
	size: number;
	space: 'world' | 'local';
	showX: boolean;
	showY: boolean;
	showZ: boolean;
	showE: boolean;
	showTranslate: boolean;
	showRotate: boolean;
	showScale: boolean;
	showOffset: boolean;
	dithering: boolean;
	object?: Object3D;
	dragging: boolean;
	active: boolean;
	activeMode: 'translate' | 'rotate' | 'scale' | '';
	activeAxis: 'X' | 'Y' | 'Z' | 'XY' | 'YZ' | 'XZ' | 'XYZ' | 'XYZE' | 'XYZX' | 'XYZY' | 'XYZZ' | 'E' | '';
	translationSnap: number;
	rotationSnap: number;
	scaleSnap: number;
	minGrazingAngle: number;
	private readonly _pointStart;
	private readonly _pointStartNorm;
	private readonly _point;
	private readonly _pointNorm;
	private readonly _pointOffset;
	private readonly _worldPositionStart;
	private readonly _worldQuaternionStart;
	private readonly _worldScaleStart;
	private readonly _worldMatrix;
	private readonly _worldPosition;
	private readonly _worldQuaternion;
	private readonly _worldQuaternionInv;
	private readonly _worldScale;
	private readonly _matrixStart;
	private readonly _positionStart;
	private readonly _quaternionStart;
	private readonly _quaternionStartInv;
	private readonly _scaleStart;
	private readonly _matrix;
	private readonly _position;
	private readonly _quaternion;
	private readonly _scale;
	private readonly _rotationAxis;
	private readonly _parentWorldPosition;
	private readonly _parentWorldQuaternion;
	private readonly _parentWorldQuaternionInv;
	private readonly _parentWorldScale;
	private readonly _tempVector1;
	private readonly _tempVector2;
	private readonly _tempQuaternion;
	private readonly _dirX;
	private readonly _dirY;
	private readonly _dirZ;
	private readonly _normalVector;
	private readonly _identityQuaternion;
	private readonly _viewportCameraPosition;
	private readonly _viewportCameraQuaternion;
	private readonly _viewportCameraScale;
	private readonly _viewportEye;
	protected readonly _cameraHelpers: Map<AnyCameraType, TransformHelper>;
	constructor( camera: AnyCameraType, domElement: HTMLElement );
	cameraChanged( newCamera: AnyCameraType ): void;
	getHelper( camera: AnyCameraType ): TransformHelper;
	dispose(): void;
	decomposeViewportCamera( camera: AnyCameraType ): Vector3;
	decomposeMatrices(): void;
	changed(): void;
	getPlaneNormal( cameraQuaternion: Quaternion ): Vector3;
	onTrackedPointerHover( pointer: PointerTracker ): void;
	onTrackedPointerDown( pointer: PointerTracker ): void;
	onTrackedPointerMove( pointer: PointerTracker ): void;
	onTrackedPointerUp( pointer: PointerTracker ): void;
	attach( object: Object3D ): this;
	detach(): this;
	getMode(): void;
	setMode( mode: 'translate' | 'rotate' | 'scale' ): void;
	setTranslationSnap( translationSnap: number ): void;
	setRotationSnap( rotationSnap: number ): void;
	setScaleSnap( scaleSnap: number ): void;
	setSize( size: number ): void;
	setSpace( space: 'world' | 'local' ): void;
	update(): void;
	addEventListener( type: string, listener: ( event: Event ) => void ): void;

}

export { TransformControls };
